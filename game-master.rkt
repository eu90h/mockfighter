#lang racket
(require "utils.rkt" "matching-engine.rkt" "orderbook.rkt" "venue.rkt" math)
(provide game-master% (struct-out instance))
(define-struct instance (owner data venue symbol))
(define game-master%
  (class object% (super-new)
    (field [instances (make-hash)])
    (define/public (new-instance api-key)
      (define venue-name (generate-exchange-name))
      (define venue (new venue% [name venue-name]))
      (define account (generate-account-number))
      (define symbol (generate-stock-name))
      (send venue add-stock symbol)
    ;  (displayln (send venue add-bot `mm))
      (send venue add-bot `mm (generate-account-number) venue-name symbol)
       (send venue add-bot `noise (generate-account-number) venue-name symbol)
      
      (define response (hash 'account account
                             'symbol symbol
                             'venue venue-name
                             'ok #t))
      (hash-set! instances api-key (instance account response venue symbol))
      response)
    
    (define/public (get-instances)
      (hash-keys instances))
    
    (define/public (get-instance-data)
      instances)
    
    (define/public (run-bots api-key)
      (define instance (hash-ref instances api-key #f))
      (if (equal? #f instance)
          (error-json "instance not found")
          (send (instance-venue instance) run-bots)))
    
    (define/public (get-bots api-key)
      (define instance (hash-ref instances api-key #f))
      (if (equal? #f instance)
          (error-json "instance not found")
          (send (instance-venue instance) get-bots)))
    
    (define/public (change-fmv api-key stock)
      (define instance (hash-ref instances api-key #f))
      (unless (equal? #f instance)
        (send (instance-venue instance) change-fmv stock)))
    
    (define/public (get-fmv api-key)
      (send (hash-ref instances api-key #f) get-fmv (instance-symbol (hash-ref instances api-key #f))))
    
    (define/public (get-order-status api-key venue stock order-id)
      (let ([instance (hash-ref instances api-key #f)])
        (if (equal? #f instance)
            (error-json "instance not running")
            (if (equal? (send (instance-venue (hash-ref instances api-key)) get-name) venue)
                (send (instance-venue instance) get-order-status stock order-id)
                (error-json "venue not found")))))
    (define/public (get-quote api-key venue stock)
      (let ([instance (hash-ref instances api-key #f)])
        (if (equal? #f instance)
            (error-json "instance not running")
            (if (equal? (send (instance-venue (hash-ref instances api-key)) get-name) venue)
                (send (instance-venue instance) get-quote stock)
                (error-json "venue not found")))))
    (define/public (get-stocks api-key venue)
       (let ([instance (hash-ref instances api-key #f)])
        (if (equal? #f instance)
            (error-json "instance not running")
            (if (equal? (send (instance-venue (hash-ref instances api-key)) get-name) venue)
                (instance-symbol instance)
                (error-json "venue not found")))))
    (define/public (get-orderbook api-key venue stock)
       (let ([instance (hash-ref instances api-key #f)])
        (if (equal? #f instance)
            (error-json "instance not running")
            (if (equal? (send (instance-venue (hash-ref instances api-key)) get-name) venue)
                (send (instance-venue (hash-ref instances api-key)) get-orderbook stock)
                (error-json "venue not found")))))
    (define/public (cancel-order api-key venue stock order-id)
      (let ([instance (hash-ref instances api-key #f)])
        (if (equal? #f instance)
            (error-json "instance not running")
            (if (equal? (send (instance-venue (hash-ref instances api-key)) get-name) venue)
                (send (instance-venue instance) cancel-order stock order-id)
                (error-json "venue not found")))))
    (define/public (handle-order api-key venue stock order)
      (define account (hash-ref order `account #f))
      (cond [(equal? #f account) (error-json "order missing account number")]
            [else (let ([instance (hash-ref instances api-key #f)])
                    (if (equal? #f instance)
                        (error-json "instance not running")
                        (let ([venue-name (hash-ref order `venue #f)])
                          (if (or (equal? #f venue-name) (not (equal? (send (instance-venue (hash-ref instances api-key)) get-name) venue-name)))
                              (error-json "venue not found")
                              (send (instance-venue instance) handle-order order)))))]))))
(module+ test
  (define gm (new game-master%))
  (define data (send gm new-instance "1234"))
  data
  (send gm handle-order (make-hash
                          (list 
                           (cons `price 1289)
                           (cons `orderType "limit")
                           (cons `fills null)
                           (cons `venue "IBQEX")
                           (cons `direction "sell")
                           (cons `account "IFL33491586")
                           (cons `qty 5))))
  (send gm handle-order (make-hash
                          (list
                           (cons `symbol (hash-ref data `symbol))
                           (cons `price 1289)
                           (cons `orderType "limit")
                           (cons `fills null)
                           (cons `venue (hash-ref data `venue))
                           (cons `direction "sell")
                           (cons `account (hash-ref data `account))
                           (cons `qty 5)))))